/*****************************************************************************
 *
 * NXP Confidential Proprietary
 *
 * Copyright (c) 2017 NXP Semiconductor;
 * All Rights Reserved
 *
 *****************************************************************************
 *
 * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

#include "apu_gen.h"
#include "warp.h"
#include "transform_lut.h"
#include "opencv2/imgcodecs.hpp"
#include "time.h"


  #include "apex.h"


int main(int, char **)
{
    // This is needed only for the Target Compiler
    // HW and resources init


/**********************************************************************
    The APU_CALL is placeholder for calling the graph.
    The definition of APU_CALL is generated by graph tool to perform
    all the manipulations with created process.
    The user can change this code using other methods for process manipulation
    generated by graph tool.
**********************************************************************/
    vsdk::UMat image = cv::imread("1.jpg",
    CV_LOAD_IMAGE_COLOR).getUMat(cv::ACCESS_RW);
    vsdk::UMat out = vsdk::UMat(720,
    1280,VSDK_CV_8UC3);


    Transform_LUT tf = Transform_LUT();
    Warp warp = Warp(0);

    clock_t start = clock();

    warp.Warp_BirdEye(image, out, tf);

    clock_t end = clock();
    std::cout<<end-start<<std::endl;

    cv::imwrite("2.png", (cv::UMat)out);
    return 0;
}
